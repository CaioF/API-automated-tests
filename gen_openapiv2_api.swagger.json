{
  "swagger": "2.0",
  "info": {
    "title": "Lifeguard backend",
    "version": "1.0",
    "contact": {
      "name": "Lifeguard website",
      "url": "https://lg.msdk-research.com",
      "email": "info@msdk-research.com"
    },
    "license": {
      "name": "BSD 3-Clause License",
      "url": "https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/AuthByTimedToken": {
      "post": {
        "summary": "Logs in an user via a timed auth token, returns a token",
        "description": "Logs in an user via a timed auth token (received from AuthQR), returns a token",
        "operationId": "ApiService_AuthByTimedToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthAuthByTimedTokenResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthAuthByTimedTokenRequest"
            }
          }
        ],
        "tags": [
          "Auth"
        ],
        "security": []
      }
    },
    "/api/v1/AuthEmployeeLogin": {
      "post": {
        "summary": "Logs in an employee user, returns a token and usertype",
        "description": "Logs in an employee user, returns a token and usertype",
        "operationId": "ApiService_AuthEmployeeLogin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthLoginEmployeeResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthLoginEmployeeRequest"
            }
          }
        ],
        "tags": [
          "Auth"
        ],
        "security": []
      }
    },
    "/api/v1/AuthManagerLogin": {
      "post": {
        "summary": "Logs in a manager user, returns a token and usertype",
        "description": "Logs in a manager user, returns a token and usertype",
        "operationId": "ApiService_AuthManagerLogin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthLoginManagerResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthLoginManagerRequest"
            }
          }
        ],
        "tags": [
          "Auth"
        ],
        "security": []
      }
    },
    "/api/v1/CreateAutomation": {
      "post": {
        "summary": "Creates an Automation and returns that Automation",
        "description": "Creates an Automation and returns that Automation",
        "operationId": "ApiService_CreateAutomation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAutomationsCreateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAutomationsCreateRequest"
            }
          }
        ],
        "tags": [
          "Automations"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    },
    "/api/v1/CreateChatMessage": {
      "post": {
        "summary": "Creates a Chat Message by Employee ID and returns that Chat Message",
        "description": "Creates a Chat Message by Employee ID and returns that Chat Message",
        "operationId": "ApiService_CreateChatMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiChatMessagesCreateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiChatMessagesCreateRequest"
            }
          }
        ],
        "tags": [
          "ChatMessages"
        ],
        "security": [
          {
            "ApiKeyAuthEmployee": [],
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/CreateDevice": {
      "post": {
        "summary": "Creates a Device and returns that Device",
        "description": "Creates a Device and returns that Device",
        "operationId": "ApiService_CreateDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDevicesCreateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDevicesCreateRequest"
            }
          }
        ],
        "tags": [
          "Devices"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    },
    "/api/v1/CreateEmployee": {
      "post": {
        "summary": "Creates an Employee and returns that Employee",
        "description": "Creates an Employee and returns that Employee",
        "operationId": "ApiService_CreateEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEmployeesCreateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiEmployeesCreateRequest"
            }
          }
        ],
        "tags": [
          "Employees"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/CreateEmployeeGroup": {
      "post": {
        "summary": "Creates an Employee Group and returns that Employee Group",
        "description": "Creates an Employee Group and returns that Employee Group",
        "operationId": "ApiService_CreateEmployeeGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEmployeeGroupsCreateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiEmployeeGroupsCreateRequest"
            }
          }
        ],
        "tags": [
          "EmployeeGroups"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/CreateIncident": {
      "post": {
        "summary": "Creates an Incident and returns that Incident",
        "description": "Creates an Incident and returns that Incident",
        "operationId": "ApiService_CreateIncident",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiIncidentsCreateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiIncidentsCreateRequest"
            }
          }
        ],
        "tags": [
          "Incidents"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    },
    "/api/v1/CreateManager": {
      "post": {
        "summary": "Creates a Manager and returns that Manager",
        "description": "Creates a Manager and returns that Manager",
        "operationId": "ApiService_CreateManager",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiManagersCreateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiManagersCreateRequest"
            }
          }
        ],
        "tags": [
          "Managers"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/CreateMetrics": {
      "post": {
        "summary": "Creates a Sensor Metric",
        "description": "Creates a Sensor Metric",
        "operationId": "ApiService_CreateMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMetricsCreateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiMetricsCreateRequest"
            }
          }
        ],
        "tags": [
          "Metrics"
        ],
        "security": [
          {
            "ApiKeyAuthEmployee": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/CreatePlugin": {
      "post": {
        "summary": "Creates a plugin and returns that plugin",
        "description": "Creates a plugin and returns that plugin",
        "operationId": "ApiService_CreatePlugin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPluginsCreateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPluginsCreateRequest"
            }
          }
        ],
        "tags": [
          "Plugins"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    },
    "/api/v1/CreateSensorType": {
      "post": {
        "summary": "Creates a Sensor Type and returns that Sensor Type",
        "description": "Creates a Sensor Type and returns that Sensor Type",
        "operationId": "ApiService_CreateSensorType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSensorTypesCreateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSensorTypesCreateRequest"
            }
          }
        ],
        "tags": [
          "SensorTypes"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/CreateZone": {
      "post": {
        "summary": "Creates a Zone and returns that Zone",
        "description": "Creates a Zone and returns that Zone",
        "operationId": "ApiService_CreateZone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiZonesCreateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiZonesCreateRequest"
            }
          }
        ],
        "tags": [
          "Zones"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/DeleteAutomation": {
      "delete": {
        "summary": "Deletes an Automation by ID",
        "description": "Deletes an Automation by ID",
        "operationId": "ApiService_DeleteAutomation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAutomationsDeleteResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAutomationsDeleteRequest"
            }
          }
        ],
        "tags": [
          "Automations"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    },
    "/api/v1/DeleteDevice": {
      "delete": {
        "summary": "Deletes a Device by ID",
        "description": "Deletes a Device by ID",
        "operationId": "ApiService_DeleteDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDevicesDeleteResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDevicesDeleteRequest"
            }
          }
        ],
        "tags": [
          "Devices"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    },
    "/api/v1/DeleteEmployee": {
      "delete": {
        "summary": "Deletes an Employee by ID",
        "description": "Deletes an Employee by ID",
        "operationId": "ApiService_DeleteEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEmployeesDeleteResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiEmployeesDeleteRequest"
            }
          }
        ],
        "tags": [
          "Employees"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/DeleteEmployeeGroup": {
      "delete": {
        "summary": "Deletes an Employee Group by ID",
        "description": "Deletes an Employee Group by ID",
        "operationId": "ApiService_DeleteEmployeeGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEmployeeGroupsDeleteResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiEmployeeGroupsDeleteRequest"
            }
          }
        ],
        "tags": [
          "EmployeeGroups"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/DeleteIncident": {
      "delete": {
        "summary": "Delete an incident by ID",
        "description": "Delete an incident by ID",
        "operationId": "ApiService_DeleteIncident",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiIncidentsDeleteResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiIncidentsDeleteRequest"
            }
          }
        ],
        "tags": [
          "Incidents"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    },
    "/api/v1/DeleteManager": {
      "delete": {
        "summary": "Deletes a Manager by ID",
        "description": "Deletes a Manager by ID",
        "operationId": "ApiService_DeleteManager",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiManagersDeleteResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiManagersDeleteRequest"
            }
          }
        ],
        "tags": [
          "Managers"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/DeletePlugin": {
      "delete": {
        "summary": "Delete an incident by ID",
        "description": "Delete an incident by ID",
        "operationId": "ApiService_DeletePlugin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPluginsDeleteResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPluginsDeleteRequest"
            }
          }
        ],
        "tags": [
          "Plugins"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    },
    "/api/v1/DeleteSensorType": {
      "delete": {
        "summary": "Deletes a Sensor Type by ID",
        "description": "Deletes a Sensor Type by ID",
        "operationId": "ApiService_DeleteSensorType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSensorTypesDeleteResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSensorTypesDeleteRequest"
            }
          }
        ],
        "tags": [
          "SensorTypes"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/DeleteZone": {
      "delete": {
        "summary": "Deletes a Zone by ID",
        "description": "Deletes a Zone by ID",
        "operationId": "ApiService_DeleteZone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiZonesDeleteResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiZonesDeleteRequest"
            }
          }
        ],
        "tags": [
          "Zones"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/DeprioritizeDevice": {
      "delete": {
        "summary": "Deprioritizes the data coming from a Device by ID",
        "description": "Deprioritizes the data coming from a Device by ID",
        "operationId": "ApiService_DeprioritizeDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/PriorityQueueDeprioritizeResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PriorityQueueDeprioritizeRequest"
            }
          }
        ],
        "tags": [
          "Prioritization"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/GenerateAuthQR": {
      "post": {
        "summary": "Creates an authorization QR code by user ID",
        "description": "Creates an authorization QR code by user ID",
        "operationId": "ApiService_GenerateAuthQR",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthGenerateAuthQRResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthGenerateAuthQRRequest"
            }
          }
        ],
        "tags": [
          "Auth"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/GetAutomation": {
      "get": {
        "summary": "Returns an Automation by ID",
        "description": "Returns an Automation by ID",
        "operationId": "ApiService_GetAutomation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAutomationsGetResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Automations"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    },
    "/api/v1/GetDevice": {
      "get": {
        "summary": "Returns a Device by ID",
        "description": "Returns a Device by ID",
        "operationId": "ApiService_GetDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDevicesGetResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "loadInfo.loadAttributes",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadInfo.loadSensors",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadInfo.loadSensorsValues",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Devices"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    },
    "/api/v1/GetEmployee": {
      "get": {
        "summary": "Returns an Employee by ID",
        "description": "Returns an Employee by ID",
        "operationId": "ApiService_GetEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEmployeesGetResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Employees"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/GetEmployeeGroup": {
      "get": {
        "summary": "Returns an Employee Group by ID",
        "description": "Returns an Employee Group by ID",
        "operationId": "ApiService_GetEmployeeGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEmployeeGroupsGetResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "EmployeeGroups"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/GetIncident": {
      "get": {
        "summary": "Returns an incident by ID",
        "description": "Returns an incident by ID",
        "operationId": "ApiService_GetIncident",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiIncidentsGetResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Incidents"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/GetManager": {
      "get": {
        "summary": "Returns a Manager by ID",
        "description": "Returns a Manager by ID",
        "operationId": "ApiService_GetManager",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiManagersGetResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Managers"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/GetPlugin": {
      "get": {
        "summary": "Returns a Plugin by ID",
        "description": "Returns a Plugin by ID",
        "operationId": "ApiService_GetPlugin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPluginsGetResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Plugins"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/GetSensor": {
      "get": {
        "summary": "Returns a Sensor by ID",
        "description": "Returns a Sensor by ID",
        "operationId": "ApiService_GetSensor",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSensorsGetResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Sensors"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/GetSensorType": {
      "get": {
        "summary": "Returns a Sensor Type by ID",
        "description": "Returns a Sensor Type by ID",
        "operationId": "ApiService_GetSensorType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSensorTypesGetResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "SensorTypes"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/GetZone": {
      "get": {
        "summary": "Returns a Zone by ID",
        "description": "Returns a Zone by ID",
        "operationId": "ApiService_GetZone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiZonesGetResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Zones"
        ],
        "security": [
          {
            "ApiKeyAuthEmployee": [],
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/ListAreaSettings": {
      "get": {
        "summary": "Returns a list of all Area Settings by section",
        "description": "Returns a list of all Area Settings by section",
        "operationId": "ApiService_ListAreaSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAreaSettingsListResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "section",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AreaSettings"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/ListAutomations": {
      "get": {
        "summary": "Returns a list of all Automations with pagination",
        "description": "Returns a list of all Automations with pagination",
        "operationId": "ApiService_ListAutomations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAutomationsListResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pagination.resultPerPage",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Automations"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    },
    "/api/v1/ListChatMessages": {
      "get": {
        "summary": "Returns a list of all Chat Messages by Employee ID with pagination",
        "description": "Returns a list of all Chat Messages by Employee ID with pagination",
        "operationId": "ApiService_ListChatMessages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiChatMessagesListResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pagination.resultPerPage",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeeID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "ChatMessages"
        ],
        "security": [
          {
            "ApiKeyAuthEmployee": [],
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/ListDevices": {
      "get": {
        "summary": "Returns a list of all Devices with pagination",
        "description": "Returns a list of all Devices with pagination",
        "operationId": "ApiService_ListDevices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDevicesListResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pagination.resultPerPage",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "loadInfo.loadAttributes",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadInfo.loadSensors",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadInfo.loadSensorsValues",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Devices"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    },
    "/api/v1/ListEmployeeGroups": {
      "get": {
        "summary": "Returns a list of all Employee Groups with pagination",
        "description": "Returns a list of all Employee Groups with pagination",
        "operationId": "ApiService_ListEmployeeGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEmployeeGroupsListResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pagination.resultPerPage",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "EmployeeGroups"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/ListEmployees": {
      "get": {
        "summary": "Returns a list of all Employees with pagination",
        "description": "Returns a list of all Employees with pagination",
        "operationId": "ApiService_ListEmployees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEmployeesListResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pagination.resultPerPage",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Employees"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/ListEvents": {
      "get": {
        "summary": "Returns a list of all Events with pagination",
        "description": "Returns a list of all Events with pagination",
        "operationId": "ApiService_ListEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEventsListResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pagination.resultPerPage",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Events"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/ListIncidents": {
      "get": {
        "summary": "Returns a list of all incidents with pagination",
        "description": "Returns a list of all incidents with pagination",
        "operationId": "ApiService_ListIncidents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiIncidentsListResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pagination.resultPerPage",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "deviceID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employeeID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Incidents"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    },
    "/api/v1/ListManagers": {
      "get": {
        "summary": "Returns a list of all Managers with pagination",
        "description": "Returns a list of all Managers with pagination",
        "operationId": "ApiService_ListManagers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiManagersListResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pagination.resultPerPage",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Managers"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/ListMetrics": {
      "get": {
        "summary": "Returns a list of all Metrics by ID over a timespan",
        "description": "Returns a list of all Metrics by ID over a timespan",
        "operationId": "ApiService_ListMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMetricsListResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sensorID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "Metrics"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/ListPlugins": {
      "get": {
        "summary": "Returns a list of all plugins with pagination",
        "description": "Returns a list of all plugins with pagination",
        "operationId": "ApiService_ListPlugins",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPluginsListResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pagination.resultPerPage",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Plugins"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    },
    "/api/v1/ListSensorTypes": {
      "get": {
        "summary": "Returns a list of all Sensor Types with pagination",
        "description": "Returns a list of all Sensor Types with pagination",
        "operationId": "ApiService_ListSensorTypes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSensorTypesListResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pagination.resultPerPage",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "SensorTypes"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/ListSensors": {
      "get": {
        "summary": "Returns a list of all Sensors with pagination",
        "description": "Returns a list of all Sensors with pagination",
        "operationId": "ApiService_ListSensors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSensorsListResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pagination.resultPerPage",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Sensors"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/ListSystemSettings": {
      "get": {
        "summary": "Returns a list of all System Settings by section",
        "description": "Returns a list of all System Settings by section",
        "operationId": "ApiService_ListSystemSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSystemSettingsListResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "section",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SystemSettings"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/ListZones": {
      "get": {
        "summary": "Returns a list of all Zones with pagination",
        "description": "Returns a list of all Zones with pagination",
        "operationId": "ApiService_ListZones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiZonesListResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pagination.resultPerPage",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Zones"
        ],
        "security": [
          {
            "ApiKeyAuthEmployee": [],
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/PrioritizeDevice": {
      "post": {
        "summary": "Prioritizes the data coming from a Device by ID",
        "description": "Prioritizes the data coming from a Device by ID",
        "operationId": "ApiService_PrioritizeDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/PriorityQueuePrioritizeResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PriorityQueuePrioritizeRequest"
            }
          }
        ],
        "tags": [
          "Prioritization"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/QueueHelpIncident": {
      "put": {
        "summary": "Queue new helper for the accident",
        "description": "Queue new helper for the accident",
        "operationId": "ApiService_QueueHelpIncident",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/IncidentsQueueHelpResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IncidentsQueueHelpRequest"
            }
          }
        ],
        "tags": [
          "Incidents"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/ResolveIncident": {
      "put": {
        "summary": "Resolves the incident",
        "description": "Resolves the incident",
        "operationId": "ApiService_ResolveIncident",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/IncidentsResolveResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IncidentsResolveRequest"
            }
          }
        ],
        "tags": [
          "Incidents"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/RollDeviceToken": {
      "delete": {
        "summary": "Deletes all previous authorization tokens of a Device by ID",
        "description": "Deletes all previous authorization tokens of a Device by ID",
        "operationId": "ApiService_RollDeviceToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDevicesRollTokenResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDevicesRollTokenRequest"
            }
          }
        ],
        "tags": [
          "Devices"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    },
    "/api/v1/RollEmployeeToken": {
      "delete": {
        "summary": "Deletes all previous authorization tokens of an Employee by ID",
        "description": "Deletes all previous authorization tokens of an Employee by ID",
        "operationId": "ApiService_RollEmployeeToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEmployeesRollTokenResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiEmployeesRollTokenRequest"
            }
          }
        ],
        "tags": [
          "Employees"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/RollManagerToken": {
      "delete": {
        "summary": "Deletes all previous authorization tokens of a Manager by ID",
        "description": "Deletes all previous authorization tokens of a Manager by ID",
        "operationId": "ApiService_RollManagerToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiManagersRollTokenResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiManagersRollTokenRequest"
            }
          }
        ],
        "tags": [
          "Managers"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/SkipIncident": {
      "put": {
        "summary": "Skips the incident",
        "description": "Skips the incident",
        "operationId": "ApiService_SkipIncident",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/IncidentsSkipResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IncidentsSkipRequest"
            }
          }
        ],
        "tags": [
          "Incidents"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/StartDeviceStream": {
      "get": {
        "summary": "Two-way data stream in between a Device and the Server",
        "description": "Two-way data stream in between a Device and the Server. All data should be forwarded using this stream after the tracking has started",
        "operationId": "ApiService_StartDeviceStream",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/DevicesTrackingStreamServerMessage"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of DevicesTrackingStreamServerMessage"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "json",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Tracking"
        ],
        "security": [
          {
            "ApiKeyAuthEmployee": []
          }
        ]
      }
    },
    "/api/v1/StartDeviceTracking": {
      "post": {
        "summary": "Starts the tracking of a Device",
        "description": "Starts the tracking of a Device, sent by app during the start of the Tracking",
        "operationId": "ApiService_StartDeviceTracking",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DevicesTrackingStartTrackingResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DevicesTrackingStartTrackingRequest"
            }
          }
        ],
        "tags": [
          "Tracking"
        ],
        "security": [
          {
            "ApiKeyAuthEmployee": []
          }
        ]
      }
    },
    "/api/v1/StopDeviceTracking": {
      "post": {
        "summary": "Stops the tracking of a Device",
        "description": "Stops the tracking of a Device, sent by app during the end of the Tracking",
        "operationId": "ApiService_StopDeviceTracking",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DevicesTrackingStopTrackingResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DevicesTrackingStopTrackingRequest"
            }
          }
        ],
        "tags": [
          "Tracking"
        ],
        "security": [
          {
            "ApiKeyAuthEmployee": []
          }
        ]
      }
    },
    "/api/v1/UpdateAreaSettings": {
      "put": {
        "summary": "Updates Area Settings by section and returns that section of Area Settings",
        "description": "Updates Area Settings by section and returns that section of Area Settings",
        "operationId": "ApiService_UpdateAreaSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAreaSettingsUpdateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAreaSettingsUpdateRequest"
            }
          }
        ],
        "tags": [
          "AreaSettings"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/UpdateAutomation": {
      "put": {
        "summary": "Update an Automation by ID and returns that Automation",
        "description": "Update an Automation by ID and returns that Automation",
        "operationId": "ApiService_UpdateAutomation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAutomationsUpdateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAutomationsUpdateRequest"
            }
          }
        ],
        "tags": [
          "Automations"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    },
    "/api/v1/UpdateDevice": {
      "put": {
        "summary": "Updates a Device by ID and returns that Device",
        "description": "Updates a Device by ID and returns that Device",
        "operationId": "ApiService_UpdateDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDevicesUpdateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDevicesUpdateRequest"
            }
          }
        ],
        "tags": [
          "Devices"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    },
    "/api/v1/UpdateEmployee": {
      "put": {
        "summary": "Updates an Employee by ID and returns that Employee",
        "description": "Updates an Employee by ID and returns that Employee",
        "operationId": "ApiService_UpdateEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEmployeesUpdateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiEmployeesUpdateRequest"
            }
          }
        ],
        "tags": [
          "Employees"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/UpdateEmployeeGroup": {
      "put": {
        "summary": "Updates an Employee Group by ID and returns that Employee Group",
        "description": "Updates an Employee Group by ID and returns that Employee Group",
        "operationId": "ApiService_UpdateEmployeeGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEmployeeGroupsUpdateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiEmployeeGroupsUpdateRequest"
            }
          }
        ],
        "tags": [
          "EmployeeGroups"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/UpdateIncident": {
      "put": {
        "summary": "Updates an existing Incident by ID and returns that Incident",
        "description": "Updates an existing Incident by ID and returns that Incident",
        "operationId": "ApiService_UpdateIncident",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiIncidentsUpdateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiIncidentsUpdateRequest"
            }
          }
        ],
        "tags": [
          "Incidents"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/UpdateManager": {
      "put": {
        "summary": "Updates a Manager by ID and returns that Manager",
        "description": "Updates a Manager by ID and returns that Manager",
        "operationId": "ApiService_UpdateManager",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiManagersUpdateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiManagersUpdateRequest"
            }
          }
        ],
        "tags": [
          "Managers"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/UpdatePlugin": {
      "put": {
        "summary": "Updates an existing Plugin by ID and returns that Plugin",
        "description": "Updates an existing Plugin by ID and returns that Plugin",
        "operationId": "ApiService_UpdatePlugin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPluginsUpdateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPluginsUpdateRequest"
            }
          }
        ],
        "tags": [
          "Plugins"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/UpdateSensor": {
      "put": {
        "summary": "Updates a Sensor by ID and returns that Sensor",
        "description": "Updates a Sensor by ID and returns that Sensor",
        "operationId": "ApiService_UpdateSensor",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSensorsUpdateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSensorsUpdateRequest"
            }
          }
        ],
        "tags": [
          "Sensors"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    },
    "/api/v1/UpdateSensorType": {
      "put": {
        "summary": "Updates a Sensor Type by ID and returns that Sensor Type",
        "description": "Updates a Sensor Type by ID and returns that Sensor Type",
        "operationId": "ApiService_UpdateSensorType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSensorTypesUpdateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSensorTypesUpdateRequest"
            }
          }
        ],
        "tags": [
          "SensorTypes"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/UpdateSystemSettings": {
      "put": {
        "summary": "Updates System Settings by section and returns that section of System Settings",
        "description": "Updates System Settings by section and returns that section of System Settings",
        "operationId": "ApiService_UpdateSystemSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSystemSettingsUpdateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSystemSettingsUpdateRequest"
            }
          }
        ],
        "tags": [
          "SystemSettings"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/UpdateZone": {
      "put": {
        "summary": "Updates a Zone by ID and returns that Zone",
        "description": "Updates a Zone by ID and returns that Zone",
        "operationId": "ApiService_UpdateZone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiZonesUpdateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiZonesUpdateRequest"
            }
          }
        ],
        "tags": [
          "Zones"
        ],
        "security": [
          {
            "ApiKeyAuthManager": [],
            "ApiKeyAuthPlugin": []
          }
        ]
      }
    },
    "/api/v1/ValidateToken": {
      "post": {
        "summary": "Validates token and returns an error if it is expired",
        "description": "Validates token and returns an error if it is expired",
        "operationId": "ApiService_ValidateToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthValidateTokenResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthValidateTokenRequest"
            }
          }
        ],
        "tags": [
          "Auth"
        ],
        "security": []
      }
    },
    "/api/v1/health": {
      "get": {
        "summary": "System components health",
        "description": "Returns system components health status",
        "operationId": "ApiService_Health",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSystemHealthStatus"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {}
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Health"
        ],
        "security": [
          {
            "ApiKeyAuthManager": []
          }
        ]
      }
    }
  },
  "definitions": {
    "AuthAuthByTimedTokenRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "AuthAuthByTimedTokenResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "userType": {
          "type": "string"
        }
      }
    },
    "AuthGenerateAuthQRRequest": {
      "type": "object",
      "properties": {
        "employeeID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AuthGenerateAuthQRResponse": {
      "type": "object",
      "properties": {
        "image": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "AuthLoginEmployeeRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "devicePhysicalID": {
          "type": "string"
        }
      }
    },
    "AuthLoginEmployeeResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "userType": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/apiPerson"
        }
      }
    },
    "AuthLoginManagerRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "AuthLoginManagerResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "userType": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/apiPerson"
        }
      }
    },
    "AuthValidateTokenRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "AuthValidateTokenResponse": {
      "type": "object",
      "properties": {
        "isValid": {
          "type": "boolean"
        }
      }
    },
    "AutomationsClauseRequest": {
      "type": "object",
      "properties": {
        "sensorID": {
          "type": "integer",
          "format": "int64",
          "title": "@inject_tag: mapstructure:\"sensor_id,omitempty\""
        },
        "clause": {
          "$ref": "#/definitions/apiAutomationCompareClause",
          "title": "@inject_tag: mapstructure:\"clause,omitempty\""
        },
        "threshold": {
          "type": "number",
          "format": "double",
          "title": "@inject_tag: mapstructure:\"threshold,omitempty\""
        }
      }
    },
    "DevicesDeviceLoadInfo": {
      "type": "object",
      "properties": {
        "loadAttributes": {
          "type": "boolean"
        },
        "loadSensors": {
          "type": "boolean"
        },
        "loadSensorsValues": {
          "type": "boolean"
        }
      }
    },
    "DevicesTrackingStartTrackingRequest": {
      "type": "object"
    },
    "DevicesTrackingStartTrackingResponse": {
      "type": "object"
    },
    "DevicesTrackingStopTrackingRequest": {
      "type": "object"
    },
    "DevicesTrackingStopTrackingResponse": {
      "type": "object"
    },
    "DevicesTrackingStreamServerMessage": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "json": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "IncidentsQueueHelpRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "employeeID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "IncidentsQueueHelpResponse": {
      "type": "object",
      "properties": {
        "helpersWaitingList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiEmployee"
          }
        }
      }
    },
    "IncidentsResolveRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "IncidentsResolveResponse": {
      "type": "object"
    },
    "IncidentsSkipRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "IncidentsSkipResponse": {
      "type": "object"
    },
    "PluginsPluginRoutesRequest": {
      "type": "object",
      "properties": {
        "exchange": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"exchange,omitempty\""
        },
        "queue": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"queue,omitempty\""
        },
        "routingKey": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"routing_key,omitempty\""
        }
      }
    },
    "PriorityQueueDeprioritizeRequest": {
      "type": "object",
      "properties": {
        "DeviceID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PriorityQueueDeprioritizeResponse": {
      "type": "object"
    },
    "PriorityQueuePrioritizeRequest": {
      "type": "object",
      "properties": {
        "DeviceID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PriorityQueuePrioritizeResponse": {
      "type": "object"
    },
    "ZonesZonePermissionsRequest": {
      "type": "object",
      "properties": {
        "allowedEmployees": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "title": "Если указаны права для юзера - применяются права юзера. Иначе - его группы"
    },
    "apiAnyValue": {
      "type": "object",
      "properties": {
        "bool": {
          "type": "boolean"
        },
        "string": {
          "type": "string"
        },
        "int32": {
          "type": "integer",
          "format": "int32"
        },
        "int64": {
          "type": "string",
          "format": "int64"
        },
        "float": {
          "type": "number",
          "format": "float"
        },
        "double": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "Аналогичный oneOf и в GenericSensorValue"
    },
    "apiAreaSetting": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "section": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "TODO ввести список настроек. В частности, в настройках должны быть указаны любимые сенсоры"
    },
    "apiAreaSettingsListResponse": {
      "type": "object",
      "properties": {
        "settings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiAreaSetting"
          },
          "description": "settings section"
        }
      },
      "title": "Response that contains a list of all area settings",
      "required": [
        "settings"
      ]
    },
    "apiAreaSettingsUpdateRequest": {
      "type": "object",
      "properties": {
        "section": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "settings": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "Request to update area settings. Send only settings that should be updated",
      "required": [
        "section",
        "key",
        "settings"
      ]
    },
    "apiAreaSettingsUpdateResponse": {
      "type": "object",
      "properties": {
        "settings": {
          "$ref": "#/definitions/apiAreaSetting"
        }
      },
      "title": "Response that contains updated area settings",
      "required": [
        "settings"
      ]
    },
    "apiAutomation": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "triggerType": {
          "$ref": "#/definitions/apiAutomationTriggerType"
        },
        "codeSnippet": {
          "type": "string"
        },
        "event": {
          "type": "string"
        },
        "sensor": {
          "$ref": "#/definitions/apiAutomationSensorClause"
        }
      }
    },
    "apiAutomationCompareClause": {
      "type": "string",
      "enum": [
        "COMPARE_CLAUSE_UNKNOWN",
        "COMPARE_CLAUSE_EQUAL",
        "COMPARE_CLAUSE_GREATER",
        "COMPARE_CLAUSE_LESS",
        "COMPARE_CLAUSE_EQUAL_OR_GREATER",
        "COMPARE_CLAUSE_EQUAL_OR_LESS"
      ],
      "default": "COMPARE_CLAUSE_UNKNOWN"
    },
    "apiAutomationSensorClause": {
      "type": "object",
      "properties": {
        "sensor": {
          "$ref": "#/definitions/apiSensor"
        },
        "clause": {
          "$ref": "#/definitions/apiAutomationCompareClause"
        },
        "threshold": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiAutomationTriggerType": {
      "type": "string",
      "enum": [
        "TRIGGER_TYPE_UNKNOWN",
        "TRIGGER_TYPE_EVENT",
        "TRIGGER_TYPE_SENSOR"
      ],
      "default": "TRIGGER_TYPE_UNKNOWN"
    },
    "apiAutomationsCreateRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "triggerType": {
          "$ref": "#/definitions/apiAutomationTriggerType"
        },
        "codeSnippet": {
          "type": "string"
        },
        "event": {
          "type": "string"
        },
        "sensor": {
          "$ref": "#/definitions/AutomationsClauseRequest"
        }
      }
    },
    "apiAutomationsCreateResponse": {
      "type": "object",
      "properties": {
        "automation": {
          "$ref": "#/definitions/apiAutomation"
        }
      }
    },
    "apiAutomationsDeleteRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiAutomationsDeleteResponse": {
      "type": "object"
    },
    "apiAutomationsGetResponse": {
      "type": "object",
      "properties": {
        "automation": {
          "$ref": "#/definitions/apiAutomation"
        }
      }
    },
    "apiAutomationsListResponse": {
      "type": "object",
      "properties": {
        "automations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiAutomation"
          }
        }
      }
    },
    "apiAutomationsUpdateRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"title,omitempty\""
        },
        "description": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"description,omitempty\""
        },
        "triggerType": {
          "$ref": "#/definitions/apiAutomationTriggerType",
          "title": "@inject_tag: mapstructure:\"trigger_type,omitempty\""
        },
        "codeSnippet": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"code_snippet,omitempty\""
        },
        "event": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"event,omitempty\""
        },
        "sensor": {
          "$ref": "#/definitions/AutomationsClauseRequest",
          "title": "@inject_tag: mapstructure:\"clause,omitempty\""
        }
      }
    },
    "apiAutomationsUpdateResponse": {
      "type": "object",
      "properties": {
        "automation": {
          "$ref": "#/definitions/apiAutomation"
        }
      }
    },
    "apiCamera": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "driver": {
          "$ref": "#/definitions/apiCameraDriver"
        },
        "height": {
          "type": "integer",
          "format": "int64"
        },
        "width": {
          "type": "integer",
          "format": "int64"
        },
        "coordinates": {
          "$ref": "#/definitions/apiCoordinates"
        },
        "verticalViewAngle": {
          "type": "number",
          "format": "float"
        },
        "horizontalViewAngle": {
          "type": "number",
          "format": "float"
        },
        "DriverData": {
          "type": "string",
          "format": "byte"
        },
        "sensors": {
          "$ref": "#/definitions/apiCameraSensors"
        },
        "host": {
          "type": "string"
        },
        "port": {
          "type": "string"
        },
        "authorization": {
          "type": "string",
          "format": "byte"
        },
        "azimuth": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "TODO validation"
    },
    "apiCameraDriver": {
      "type": "string",
      "enum": [
        "CAMERA_DRIVER_UNKNOWN",
        "CAMERA_DRIVER_HIKVISION"
      ],
      "default": "CAMERA_DRIVER_UNKNOWN"
    },
    "apiCameraSensors": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "type": "string"
        },
        "alert": {
          "type": "boolean"
        }
      }
    },
    "apiChatMessage": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "manager": {
          "$ref": "#/definitions/apiManager"
        },
        "employee": {
          "$ref": "#/definitions/apiEmployee"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "apiChatMessagesCreateRequest": {
      "type": "object",
      "properties": {
        "employeeID": {
          "type": "integer",
          "format": "int64"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "apiChatMessagesCreateResponse": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/apiChatMessage"
        }
      }
    },
    "apiChatMessagesListResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiChatMessage"
          }
        }
      }
    },
    "apiCoordinates": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "type": "number",
          "format": "double"
        },
        "altitude": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiCredentials": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"password,omitempty\""
        }
      }
    },
    "apiDataType": {
      "type": "string",
      "enum": [
        "DATA_TYPE_UNKNOWN",
        "DATA_TYPE_INT32",
        "DATA_TYPE_INT64",
        "DATA_TYPE_FLOAT",
        "DATA_TYPE_DOUBLE",
        "DATA_TYPE_STRING",
        "DATA_TYPE_BOOL"
      ],
      "default": "DATA_TYPE_UNKNOWN"
    },
    "apiDevice": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "physicalID": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/apiEmployee"
        },
        "capabilities": {
          "type": "string",
          "format": "byte"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDeviceAttribute"
          }
        },
        "data": {
          "type": "string",
          "format": "byte"
        },
        "tokenIteration": {
          "type": "integer",
          "format": "int64"
        },
        "sensors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiSensor"
          }
        }
      }
    },
    "apiDeviceAttribute": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "dataType": {
          "$ref": "#/definitions/apiDataType"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "apiDevicesCreateRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "physicalID": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "employeeID": {
          "type": "integer",
          "format": "int64"
        },
        "data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "apiDevicesCreateResponse": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/apiDevice"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "apiDevicesDeleteRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiDevicesDeleteResponse": {
      "type": "object"
    },
    "apiDevicesGetResponse": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/apiDevice"
        }
      }
    },
    "apiDevicesListResponse": {
      "type": "object",
      "properties": {
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDevice"
          }
        }
      }
    },
    "apiDevicesRollTokenRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiDevicesRollTokenResponse": {
      "type": "object"
    },
    "apiDevicesUpdateRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"title,omitempty\""
        },
        "description": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"description,omitempty\""
        },
        "physicalID": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"physical_id,omitempty\""
        },
        "type": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"type,omitempty\""
        },
        "employeeID": {
          "type": "integer",
          "format": "int64",
          "title": "@inject_tag: mapstructure:\"employee_id,omitempty\""
        },
        "data": {
          "type": "string",
          "format": "byte",
          "title": "@inject_tag: mapstructure:\"data,omitempty\""
        },
        "loadInfo": {
          "$ref": "#/definitions/DevicesDeviceLoadInfo"
        }
      }
    },
    "apiDevicesUpdateResponse": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/apiDevice"
        }
      }
    },
    "apiDockerContainer": {
      "type": "object",
      "properties": {
        "Status": {
          "type": "string"
        },
        "State": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "apiEmployee": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "person": {
          "$ref": "#/definitions/apiPerson"
        },
        "credentials": {
          "$ref": "#/definitions/apiCredentials"
        },
        "tokenIteration": {
          "type": "integer",
          "format": "int64"
        },
        "group": {
          "$ref": "#/definitions/apiEmployeeGroup"
        }
      }
    },
    "apiEmployeeGroup": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        }
      }
    },
    "apiEmployeeGroupsCreateRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        }
      }
    },
    "apiEmployeeGroupsCreateResponse": {
      "type": "object",
      "properties": {
        "employeeGroup": {
          "$ref": "#/definitions/apiEmployeeGroup"
        }
      }
    },
    "apiEmployeeGroupsDeleteRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiEmployeeGroupsDeleteResponse": {
      "type": "object"
    },
    "apiEmployeeGroupsGetResponse": {
      "type": "object",
      "properties": {
        "employeeGroup": {
          "$ref": "#/definitions/apiEmployeeGroup"
        }
      }
    },
    "apiEmployeeGroupsListResponse": {
      "type": "object",
      "properties": {
        "employeeGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiEmployeeGroup"
          }
        }
      }
    },
    "apiEmployeeGroupsUpdateRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"title,omitempty\""
        },
        "description": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"description,omitempty\""
        },
        "slug": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"slug,omitempty\""
        }
      }
    },
    "apiEmployeeGroupsUpdateResponse": {
      "type": "object",
      "properties": {
        "employeeGroup": {
          "$ref": "#/definitions/apiEmployeeGroup"
        }
      }
    },
    "apiEmployeesCreateRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "person": {
          "$ref": "#/definitions/apiPersonCreateRequest"
        },
        "credentials": {
          "$ref": "#/definitions/apiCredentials"
        },
        "group": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiEmployeesCreateResponse": {
      "type": "object",
      "properties": {
        "employee": {
          "$ref": "#/definitions/apiEmployee"
        }
      }
    },
    "apiEmployeesDeleteRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiEmployeesDeleteResponse": {
      "type": "object"
    },
    "apiEmployeesGetResponse": {
      "type": "object",
      "properties": {
        "employee": {
          "$ref": "#/definitions/apiEmployee"
        }
      }
    },
    "apiEmployeesListResponse": {
      "type": "object",
      "properties": {
        "employees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiEmployee"
          }
        }
      }
    },
    "apiEmployeesRollTokenRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiEmployeesRollTokenResponse": {
      "type": "object"
    },
    "apiEmployeesUpdateRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"description,omitempty\""
        },
        "person": {
          "$ref": "#/definitions/apiPersonUpdateRequest",
          "title": "@inject_tag: mapstructure:\",squash,omitempty\""
        },
        "credentials": {
          "$ref": "#/definitions/apiCredentials"
        },
        "group": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiEmployeesUpdateResponse": {
      "type": "object",
      "properties": {
        "employee": {
          "$ref": "#/definitions/apiEmployee"
        }
      }
    },
    "apiErrorObject": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "Response code",
          "title": "code",
          "pattern": "^[0-9]$"
        },
        "message": {
          "type": "string",
          "description": "Response message",
          "title": "message",
          "pattern": "^[a-zA-Z0-9]{1, 32}$"
        }
      }
    },
    "apiErrorResponse": {
      "type": "object",
      "properties": {
        "correlationId": {
          "type": "string",
          "description": "Unique event identifier for server requests",
          "title": "x-correlation-id",
          "pattern": "^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$"
        },
        "error": {
          "$ref": "#/definitions/apiErrorObject"
        }
      }
    },
    "apiEvent": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "device": {
          "$ref": "#/definitions/apiDevice"
        },
        "sensor": {
          "$ref": "#/definitions/apiSensor"
        },
        "employee": {
          "$ref": "#/definitions/apiEmployee"
        },
        "coordinates": {
          "$ref": "#/definitions/apiCoordinates"
        },
        "type": {
          "$ref": "#/definitions/apiEventType"
        },
        "level": {
          "$ref": "#/definitions/apiEventLevel"
        },
        "data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "apiEventLevel": {
      "type": "string",
      "enum": [
        "EVENT_LEVEL_UNKNOWN",
        "EVENT_LEVEL_DEBUG",
        "EVENT_LEVEL_INFO",
        "EVENT_LEVEL_WARNING",
        "EVENT_LEVEL_ERROR",
        "EVENT_LEVEL_FATAL"
      ],
      "default": "EVENT_LEVEL_UNKNOWN"
    },
    "apiEventType": {
      "type": "string",
      "enum": [
        "EVENT_TYPE_UNKNOWN",
        "EVENT_TYPE_SYSTEM",
        "EVENT_TYPE_DEVICE",
        "EVENT_TYPE_SENSOR",
        "EVENT_TYPE_USER"
      ],
      "default": "EVENT_TYPE_UNKNOWN"
    },
    "apiEventsListResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiEvent"
          }
        }
      }
    },
    "apiGenericSensorValue": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "coordinates": {
          "$ref": "#/definitions/apiCoordinates"
        },
        "bool": {
          "type": "boolean"
        },
        "string": {
          "type": "string"
        },
        "int32": {
          "type": "integer",
          "format": "int32"
        },
        "int64": {
          "type": "string",
          "format": "int64"
        },
        "float": {
          "type": "number",
          "format": "float"
        },
        "double": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiGeometry": {
      "type": "object",
      "properties": {
        "geojson": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "apiGraphType": {
      "type": "string",
      "enum": [
        "GRAPH_TYPE_UNKNOWN",
        "GRAPH_TYPE_LINE",
        "GRAPH_TYPE_NUMBER"
      ],
      "default": "GRAPH_TYPE_UNKNOWN"
    },
    "apiIncident": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "injured": {
          "$ref": "#/definitions/apiEmployee"
        },
        "device": {
          "$ref": "#/definitions/apiDevice"
        },
        "sensor": {
          "$ref": "#/definitions/apiSensor"
        },
        "initialZone": {
          "$ref": "#/definitions/apiZone"
        },
        "history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiIncidentHistoryEntry"
          }
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/apiIncidentStatus"
        },
        "usefulCameras": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiCamera"
          }
        },
        "secondsBeforeAutoAction": {
          "type": "integer",
          "format": "int64"
        },
        "closestWorkers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiIncidentEmployeeDistance"
          }
        },
        "confirmedHelper": {
          "$ref": "#/definitions/apiEmployee"
        },
        "helpersWaitingList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiEmployee"
          }
        }
      }
    },
    "apiIncidentEmployeeDistance": {
      "type": "object",
      "properties": {
        "employee": {
          "$ref": "#/definitions/apiEmployee"
        },
        "secondsToArrive": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiIncidentHistoryEntry": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "zone": {
          "$ref": "#/definitions/apiZone"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/apiIncidentHistoryEntryType"
        },
        "data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "apiIncidentHistoryEntryType": {
      "type": "string",
      "enum": [
        "INCIDENT_HISTORY_ENTRY_TYPE_UNKNOWN",
        "INCIDENT_HISTORY_ENTRY_TYPE_HELP_ASSIGNED",
        "INCIDENT_HISTORY_ENTRY_TYPE_MESSAGE_SENT",
        "INCIDENT_HISTORY_ENTRY_TYPE_MESSAGE_RECEIVED",
        "INCIDENT_HISTORY_ENTRY_TYPE_DEVICE_SOUND_ALARM_ON",
        "INCIDENT_HISTORY_ENTRY_TYPE_DEVICE_SOUND_ALARM_OFF",
        "INCIDENT_HISTORY_ENTRY_TYPE_DEVICE_NET_TO_P2P",
        "INCIDENT_HISTORY_ENTRY_TYPE_DEVICE_NET_LOST",
        "INCIDENT_HISTORY_ENTRY_TYPE_REPEATED_ALERT",
        "INCIDENT_HISTORY_ENTRY_TYPE_STARTED",
        "INCIDENT_HISTORY_ENTRY_TYPE_CANCELED",
        "INCIDENT_HISTORY_ENTRY_TYPE_RESOLVED"
      ],
      "default": "INCIDENT_HISTORY_ENTRY_TYPE_UNKNOWN"
    },
    "apiIncidentStatus": {
      "type": "string",
      "enum": [
        "INCIDENT_STATUS_UNKNOWN",
        "INCIDENT_STATUS_RESOLVED",
        "INCIDENT_STATUS_CANCELED",
        "INCIDENT_STATUS_STARTED",
        "INCIDENT_STATUS_HELP_ASSIGNED"
      ],
      "default": "INCIDENT_STATUS_UNKNOWN"
    },
    "apiIncidentsCreateRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "employeeID": {
          "type": "integer",
          "format": "int64"
        },
        "deviceID": {
          "type": "integer",
          "format": "int64"
        },
        "sensorID": {
          "type": "integer",
          "format": "int64"
        },
        "initialZone": {
          "type": "integer",
          "format": "int64"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/apiIncidentStatus"
        }
      }
    },
    "apiIncidentsCreateResponse": {
      "type": "object",
      "properties": {
        "incident": {
          "$ref": "#/definitions/apiIncident"
        }
      }
    },
    "apiIncidentsDeleteRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiIncidentsDeleteResponse": {
      "type": "object"
    },
    "apiIncidentsGetResponse": {
      "type": "object",
      "properties": {
        "incident": {
          "$ref": "#/definitions/apiIncident"
        }
      }
    },
    "apiIncidentsListResponse": {
      "type": "object",
      "properties": {
        "incidents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiIncident"
          }
        }
      }
    },
    "apiIncidentsUpdateRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"description,omitempty\""
        }
      }
    },
    "apiIncidentsUpdateResponse": {
      "type": "object",
      "properties": {
        "incident": {
          "$ref": "#/definitions/apiIncident"
        }
      }
    },
    "apiManager": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "person": {
          "$ref": "#/definitions/apiPerson"
        },
        "credentials": {
          "$ref": "#/definitions/apiCredentials"
        },
        "tokenIteration": {
          "type": "integer",
          "format": "int64"
        },
        "capabilities": {
          "$ref": "#/definitions/apiManagerCapabilities"
        }
      }
    },
    "apiManagerCapabilities": {
      "type": "object",
      "properties": {
        "viewSingle": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "viewSeveral": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "editSingle": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "editSeveral": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "create": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "delete": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "TODO поправить права"
    },
    "apiManagersCreateRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "person": {
          "$ref": "#/definitions/apiPersonCreateRequest"
        },
        "credentials": {
          "$ref": "#/definitions/apiCredentials"
        },
        "capabilities": {
          "$ref": "#/definitions/apiManagerCapabilities"
        }
      }
    },
    "apiManagersCreateResponse": {
      "type": "object",
      "properties": {
        "manager": {
          "$ref": "#/definitions/apiManager"
        }
      }
    },
    "apiManagersDeleteRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiManagersDeleteResponse": {
      "type": "object"
    },
    "apiManagersGetResponse": {
      "type": "object",
      "properties": {
        "manager": {
          "$ref": "#/definitions/apiManager"
        }
      }
    },
    "apiManagersListResponse": {
      "type": "object",
      "properties": {
        "managers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiManager"
          }
        }
      }
    },
    "apiManagersRollTokenRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiManagersRollTokenResponse": {
      "type": "object"
    },
    "apiManagersUpdateRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"description,omitempty\""
        },
        "person": {
          "$ref": "#/definitions/apiPersonUpdateRequest",
          "title": "@inject_tag: mapstructure:\",squash,omitempty\""
        },
        "credentials": {
          "$ref": "#/definitions/apiCredentials",
          "title": "@inject_tag: mapstructure:\",squash,omitempty\""
        },
        "capabilities": {
          "$ref": "#/definitions/apiManagerCapabilities",
          "title": "@inject_tag: mapstructure:\"capabilities,omitempty\""
        }
      }
    },
    "apiManagersUpdateResponse": {
      "type": "object",
      "properties": {
        "manager": {
          "$ref": "#/definitions/apiManager"
        }
      }
    },
    "apiMetricsCreateRequest": {
      "type": "object",
      "properties": {
        "ts": {
          "type": "string",
          "format": "date-time"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/apiAnyValue"
          },
          "title": "TODO validation\nmap\u003cstring, google.protobuf.Any\u003e data = 2 [(validate.rules).map = {min_pairs: 1, no_sparse: true, keys: {\n    string: {\n        min_len: 1,\n        max_len: 255\n    }\n}, \n// TODO неправильно генерируется выходной файл\n// values: {\n//     any: {\n//         in: [\"type.googleapis.com/google.protobuf.BoolValue\", \"type.googleapis.com/google.protobuf.DoubleValue\", \"type.googleapis.com/google.protobuf.FloatValue\", \"type.googleapis.com/google.protobuf.Int32Value\", \"type.googleapis.com/google.protobuf.Int64Value\", \"type.googleapis.com/google.protobuf.String\"]\n//     }\n// }\n}"
        }
      }
    },
    "apiMetricsCreateResponse": {
      "type": "object"
    },
    "apiMetricsListResponse": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiGenericSensorValue"
          }
        }
      }
    },
    "apiPagination": {
      "type": "object",
      "properties": {
        "pageNumber": {
          "type": "integer",
          "format": "int64"
        },
        "resultPerPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiPerson": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"first_name,omitempty\""
        },
        "lastName": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"last_name,omitempty\""
        },
        "image": {
          "type": "string",
          "format": "byte",
          "title": "@inject_tag: mapstructure:\"image,omitempty\""
        },
        "email": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"email,omitempty\""
        },
        "phone": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"phone,omitempty\""
        }
      }
    },
    "apiPersonCreateRequest": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"first_name,omitempty\""
        },
        "lastName": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"last_name,omitempty\""
        },
        "image": {
          "type": "string",
          "format": "byte",
          "title": "@inject_tag: mapstructure:\"image,omitempty\""
        },
        "email": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"email,omitempty\""
        },
        "phone": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"phone,omitempty\""
        }
      }
    },
    "apiPersonUpdateRequest": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"first_name,omitempty\""
        },
        "lastName": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"last_name,omitempty\""
        },
        "image": {
          "type": "string",
          "format": "byte",
          "title": "@inject_tag: mapstructure:\"image,omitempty\""
        },
        "email": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"email,omitempty\""
        },
        "phone": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"phone,omitempty\""
        }
      }
    },
    "apiPlugin": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "docker": {
          "$ref": "#/definitions/apiDockerContainer"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPluginRoutes"
          }
        }
      }
    },
    "apiPluginRoutes": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "exchange": {
          "type": "string"
        },
        "queue": {
          "type": "string"
        },
        "routingKey": {
          "type": "string"
        }
      }
    },
    "apiPluginsCreateRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "dockerContainerName": {
          "type": "string"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PluginsPluginRoutesRequest"
          }
        }
      }
    },
    "apiPluginsCreateResponse": {
      "type": "object",
      "properties": {
        "plugin": {
          "$ref": "#/definitions/apiPlugin"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "apiPluginsDeleteRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiPluginsDeleteResponse": {
      "type": "object"
    },
    "apiPluginsGetResponse": {
      "type": "object",
      "properties": {
        "plugin": {
          "$ref": "#/definitions/apiPlugin"
        }
      }
    },
    "apiPluginsListResponse": {
      "type": "object",
      "properties": {
        "plugins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPlugin"
          }
        }
      }
    },
    "apiPluginsUpdateRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"title,omitempty\""
        },
        "description": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"description,omitempty\""
        },
        "dockerContainerName": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"docker_name,omitempty\""
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PluginsPluginRoutesRequest"
          },
          "title": "@inject_tag: mapstructure:\"routes,omitempty\""
        }
      }
    },
    "apiPluginsUpdateResponse": {
      "type": "object",
      "properties": {
        "plugin": {
          "$ref": "#/definitions/apiPlugin"
        }
      }
    },
    "apiSensor": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "graphType": {
          "$ref": "#/definitions/apiGraphType"
        },
        "type": {
          "$ref": "#/definitions/apiSensorType"
        },
        "device": {
          "$ref": "#/definitions/apiDevice"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiGenericSensorValue"
          }
        }
      }
    },
    "apiSensorType": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "graphType": {
          "$ref": "#/definitions/apiGraphType"
        },
        "dataType": {
          "$ref": "#/definitions/apiDataType"
        }
      }
    },
    "apiSensorTypesCreateRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "graphType": {
          "$ref": "#/definitions/apiGraphType"
        },
        "dataType": {
          "$ref": "#/definitions/apiDataType"
        }
      }
    },
    "apiSensorTypesCreateResponse": {
      "type": "object",
      "properties": {
        "sensorType": {
          "$ref": "#/definitions/apiSensorType"
        }
      }
    },
    "apiSensorTypesDeleteRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiSensorTypesDeleteResponse": {
      "type": "object"
    },
    "apiSensorTypesGetResponse": {
      "type": "object",
      "properties": {
        "sensorType": {
          "$ref": "#/definitions/apiSensorType"
        }
      }
    },
    "apiSensorTypesListResponse": {
      "type": "object",
      "properties": {
        "sensorTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiSensorType"
          }
        }
      }
    },
    "apiSensorTypesUpdateRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"title,omitempty\""
        },
        "description": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"description,omitempty\""
        },
        "graphType": {
          "$ref": "#/definitions/apiGraphType",
          "title": "@inject_tag: mapstructure:\"graph_type,omitempty\""
        }
      }
    },
    "apiSensorTypesUpdateResponse": {
      "type": "object",
      "properties": {
        "sensorType": {
          "$ref": "#/definitions/apiSensorType"
        }
      }
    },
    "apiSensorsGetResponse": {
      "type": "object",
      "properties": {
        "sensor": {
          "$ref": "#/definitions/apiSensor"
        }
      }
    },
    "apiSensorsListResponse": {
      "type": "object",
      "properties": {
        "sensors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiSensor"
          }
        }
      }
    },
    "apiSensorsUpdateRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"title,omitempty\""
        },
        "description": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"description,omitempty\""
        },
        "graphType": {
          "$ref": "#/definitions/apiGraphType",
          "title": "@inject_tag: mapstructure:\"graph_type,omitempty\""
        }
      }
    },
    "apiSensorsUpdateResponse": {
      "type": "object",
      "properties": {
        "sensor": {
          "$ref": "#/definitions/apiSensor"
        }
      }
    },
    "apiSystemHealthStatus": {
      "type": "object",
      "properties": {
        "postgresUp": {
          "type": "boolean"
        },
        "postgresErr": {
          "type": "string"
        },
        "rabbitMQUp": {
          "type": "boolean"
        },
        "rabbitMQErr": {
          "type": "string"
        },
        "redisUp": {
          "type": "boolean"
        },
        "redisErr": {
          "type": "string"
        }
      }
    },
    "apiSystemSetting": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "section": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "apiSystemSettingsListResponse": {
      "type": "object",
      "properties": {
        "settings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiSystemSetting"
          },
          "description": "settings section"
        }
      },
      "title": "Response that contains a list of all system settings",
      "required": [
        "settings"
      ]
    },
    "apiSystemSettingsUpdateRequest": {
      "type": "object",
      "properties": {
        "section": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "settings": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "Request to update system settings. Send only settings that should be updated",
      "required": [
        "section",
        "key",
        "settings"
      ]
    },
    "apiSystemSettingsUpdateResponse": {
      "type": "object",
      "properties": {
        "settings": {
          "$ref": "#/definitions/apiSystemSetting"
        }
      },
      "title": "Response that contains updated system settings",
      "required": [
        "settings"
      ]
    },
    "apiZone": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "allowedEmployees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiZoneAllowedEmployee"
          }
        },
        "path": {
          "$ref": "#/definitions/apiGeometry"
        },
        "center": {
          "$ref": "#/definitions/apiCoordinates"
        },
        "stats": {
          "$ref": "#/definitions/apiZoneStats"
        }
      }
    },
    "apiZoneAllowedEmployee": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "employee": {
          "$ref": "#/definitions/apiEmployee"
        }
      },
      "title": "TODO add unique constraint (employee_id, zone_id)"
    },
    "apiZoneStats": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDevice"
          }
        },
        "warnings": {
          "type": "integer",
          "format": "int64"
        },
        "incidents": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiZonesCreateRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "permissions": {
          "$ref": "#/definitions/ZonesZonePermissionsRequest"
        },
        "path": {
          "$ref": "#/definitions/apiGeometry"
        }
      }
    },
    "apiZonesCreateResponse": {
      "type": "object",
      "properties": {
        "zone": {
          "$ref": "#/definitions/apiZone"
        }
      }
    },
    "apiZonesDeleteRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiZonesDeleteResponse": {
      "type": "object"
    },
    "apiZonesGetResponse": {
      "type": "object",
      "properties": {
        "zone": {
          "$ref": "#/definitions/apiZone"
        }
      }
    },
    "apiZonesListResponse": {
      "type": "object",
      "properties": {
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiZone"
          }
        }
      }
    },
    "apiZonesUpdateRequest": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"title,omitempty\""
        },
        "description": {
          "type": "string",
          "title": "@inject_tag: mapstructure:\"description,omitempty\""
        },
        "permissions": {
          "$ref": "#/definitions/ZonesZonePermissionsRequest",
          "title": "@inject_tag: mapstructure:\"permissions,omitempty\""
        },
        "path": {
          "$ref": "#/definitions/apiGeometry",
          "title": "@inject_tag: mapstructure:\"path,omitempty\""
        }
      }
    },
    "apiZonesUpdateResponse": {
      "type": "object",
      "properties": {
        "zone": {
          "$ref": "#/definitions/apiZone"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "ApiKeyAuthEmployee": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "ApiKeyAuthManager": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "ApiKeyAuthPlugin": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKeyAuthEmployee": [],
      "ApiKeyAuthManager": [],
      "ApiKeyAuthPlugin": []
    }
  ]
}
