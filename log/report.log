["start",{"total":43}]
["pass",{"title":"returns 200 when the request body params match the DB entry","fullTitle":"Logs in a manager user, returns a token and usertype returns 200 when the request body params match the DB entry","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/0_AuthManagerLogin/AuthManagerLogin.test.js","duration":33,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 401 when the request body params do not match the DB entry","fullTitle":"Logs in a manager user, returns a token and usertype returns 401 when the request body params do not match the DB entry","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/0_AuthManagerLogin/AuthManagerLogin.test.js","duration":7,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 400 when the request body params are null","fullTitle":"Logs in a manager user, returns a token and usertype returns 400 when the request body params are null","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/0_AuthManagerLogin/AuthManagerLogin.test.js","duration":3,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 200 when the request body params do match the swagger specification","fullTitle":"Creates an Employee Group and returns that Employee Group returns 200 when the request body params do match the swagger specification","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/1_EmployeeGroups/CreateEmployeeGroup.test.js","duration":8,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 400 when the request body params do not match the swagger specification","fullTitle":"Creates an Employee Group and returns that Employee Group returns 400 when the request body params do not match the swagger specification","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/1_EmployeeGroups/CreateEmployeeGroup.test.js","duration":3,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 400 when the required request body params are null","fullTitle":"Creates an Employee Group and returns that Employee Group returns 400 when the required request body params are null","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/1_EmployeeGroups/CreateEmployeeGroup.test.js","duration":7,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 200 when the optional request body params match are null","fullTitle":"Creates an Employee Group and returns that Employee Group returns 200 when the optional request body params match are null","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/1_EmployeeGroups/CreateEmployeeGroup.test.js","duration":6,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 200 when the request body params match the swagger specification","fullTitle":"Creates an Employee and returns that Employee returns 200 when the request body params match the swagger specification","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/2_Employees/CreateEmployee.test.js","duration":15,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 200 when the optional request body params match are null","fullTitle":"Creates an Employee and returns that Employee returns 200 when the optional request body params match are null","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/2_Employees/CreateEmployee.test.js","duration":14,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 400 when the request body params do not match the swagger specification","fullTitle":"Creates an Employee and returns that Employee returns 400 when the request body params do not match the swagger specification","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/2_Employees/CreateEmployee.test.js","duration":3,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 400 when the required request body params are null","fullTitle":"Creates an Employee and returns that Employee returns 400 when the required request body params are null","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/2_Employees/CreateEmployee.test.js","duration":3,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 404 when the specified Employee Group ID is not in the DB","fullTitle":"Creates an Employee and returns that Employee returns 404 when the specified Employee Group ID is not in the DB","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/2_Employees/CreateEmployee.test.js","duration":6,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 200 when the request body params match the swagger specification","fullTitle":"Creates a Device and returns that Device and a Token returns 200 when the request body params match the swagger specification","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/3_Devices/CreateDevice.test.js","duration":9,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 200 when the optional request body params match are null","fullTitle":"Creates a Device and returns that Device and a Token returns 200 when the optional request body params match are null","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/3_Devices/CreateDevice.test.js","duration":8,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 400 when the request body params do not match the swagger specification","fullTitle":"Creates a Device and returns that Device and a Token returns 400 when the request body params do not match the swagger specification","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/3_Devices/CreateDevice.test.js","duration":3,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 400 when the required request body params are null","fullTitle":"Creates a Device and returns that Device and a Token returns 400 when the required request body params are null","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/3_Devices/CreateDevice.test.js","duration":3,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 404 when the specified Employee ID is not in the DB","fullTitle":"Creates a Device and returns that Device and a Token returns 404 when the specified Employee ID is not in the DB","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/3_Devices/CreateDevice.test.js","duration":3,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 400 when the specified Employee ID is already attached to another device","fullTitle":"Creates a Device and returns that Device and a Token returns 400 when the specified Employee ID is already attached to another device","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/3_Devices/CreateDevice.test.js","duration":4,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 200 when the request body params match the swagger specification","fullTitle":"Creates a Sensor Type and returns that Sensor Type returns 200 when the request body params match the swagger specification","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/4_SensorTypes/CreateSensorType.test.js","duration":9,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 200 when the optional request body params match are null","fullTitle":"Creates a Sensor Type and returns that Sensor Type returns 200 when the optional request body params match are null","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/4_SensorTypes/CreateSensorType.test.js","duration":8,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 400 when the request body params do not match the swagger specification","fullTitle":"Creates a Sensor Type and returns that Sensor Type returns 400 when the request body params do not match the swagger specification","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/4_SensorTypes/CreateSensorType.test.js","duration":2,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 400 when the required request body params are null","fullTitle":"Creates a Sensor Type and returns that Sensor Type returns 400 when the required request body params are null","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/4_SensorTypes/CreateSensorType.test.js","duration":3,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 200 when the request body params match the swagger specification","fullTitle":"Creates a Zone and returns that Zone returns 200 when the request body params match the swagger specification","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/6_Zones/CreateZone.test.js","duration":10,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 200 when the optional request body params match are null","fullTitle":"Creates a Zone and returns that Zone returns 200 when the optional request body params match are null","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/6_Zones/CreateZone.test.js","duration":6,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 400 when the request body params do not match the swagger specification","fullTitle":"Creates a Zone and returns that Zone returns 400 when the request body params do not match the swagger specification","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/6_Zones/CreateZone.test.js","duration":3,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 400 when the required request body params are null","fullTitle":"Creates a Zone and returns that Zone returns 400 when the required request body params are null","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/6_Zones/CreateZone.test.js","duration":3,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 404 when the specified Allowed Employee IDs are not in the DB","fullTitle":"Creates a Zone and returns that Zone returns 404 when the specified Allowed Employee IDs are not in the DB","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/6_Zones/CreateZone.test.js","duration":4,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 200 when the request body params match the swagger specification","fullTitle":"Creates an Incident and returns that Incident returns 200 when the request body params match the swagger specification","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/7_Incidents/CreateIncident.test.js","duration":8,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 200 when the optional request body params match are null","fullTitle":"Creates an Incident and returns that Incident returns 200 when the optional request body params match are null","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/7_Incidents/CreateIncident.test.js","duration":6,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 400 when the request body params do not match the swagger specification","fullTitle":"Creates an Incident and returns that Incident returns 400 when the request body params do not match the swagger specification","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/7_Incidents/CreateIncident.test.js","duration":2,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 400 when the required request body params are null","fullTitle":"Creates an Incident and returns that Incident returns 400 when the required request body params are null","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/7_Incidents/CreateIncident.test.js","duration":2,"currentRetry":0,"speed":"fast"}]
["fail",{"title":"returns 404 when the specified Employee ID is not in the DB","fullTitle":"Creates an Incident and returns that Incident returns 404 when the specified Employee ID is not in the DB","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/7_Incidents/CreateIncident.test.js","duration":11,"currentRetry":0,"err":"Status code\n\n    Actual:   200\n    Expected: 404\n","stack":"AssertionError: Status code\n\n    Actual:   200\n    Expected: 404\n\n    at assert (node_modules/hippie/lib/hippie/assert.js:36:10)\n    at statusCode (node_modules/hippie/lib/hippie/expect.js:23:10)\n    at verify (node_modules/hippie/lib/hippie/client.js:494:5)\n    at Client.verify (node_modules/hippie/lib/hippie/client.js:495:5)\n    at /home/kraft/Work/qoollo/lifeguard/backend/integration-tests/node_modules/hippie/lib/hippie/client.js:455:12\n    at Client.exports.json [as parse] (node_modules/hippie/lib/hippie/parsers.js:21:3)\n    at Request._callback (node_modules/hippie/lib/hippie/client.js:453:10)\n    at Request.self.callback (node_modules/request/request.js:185:22)\n    at Request.<anonymous> (node_modules/request/request.js:1157:10)\n    at IncomingMessage.<anonymous> (node_modules/request/request.js:1079:12)\n    at endReadableNT (internal/streams/readable.js:1327:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)"}]
["fail",{"title":"returns 404 when the specified Device ID is not in the DB","fullTitle":"Creates an Incident and returns that Incident returns 404 when the specified Device ID is not in the DB","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/7_Incidents/CreateIncident.test.js","duration":6,"currentRetry":0,"err":"Status code\n\n    Actual:   200\n    Expected: 404\n","stack":"AssertionError: Status code\n\n    Actual:   200\n    Expected: 404\n\n    at assert (node_modules/hippie/lib/hippie/assert.js:36:10)\n    at statusCode (node_modules/hippie/lib/hippie/expect.js:23:10)\n    at verify (node_modules/hippie/lib/hippie/client.js:494:5)\n    at Client.verify (node_modules/hippie/lib/hippie/client.js:495:5)\n    at /home/kraft/Work/qoollo/lifeguard/backend/integration-tests/node_modules/hippie/lib/hippie/client.js:455:12\n    at Client.exports.json [as parse] (node_modules/hippie/lib/hippie/parsers.js:21:3)\n    at Request._callback (node_modules/hippie/lib/hippie/client.js:453:10)\n    at Request.self.callback (node_modules/request/request.js:185:22)\n    at Request.<anonymous> (node_modules/request/request.js:1157:10)\n    at IncomingMessage.<anonymous> (node_modules/request/request.js:1079:12)\n    at endReadableNT (internal/streams/readable.js:1327:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)"}]
["fail",{"title":"returns 404 when the specified Sensor ID is not in the DB","fullTitle":"Creates an Incident and returns that Incident returns 404 when the specified Sensor ID is not in the DB","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/7_Incidents/CreateIncident.test.js","duration":7,"currentRetry":0,"err":"Status code\n\n    Actual:   200\n    Expected: 404\n","stack":"AssertionError: Status code\n\n    Actual:   200\n    Expected: 404\n\n    at assert (node_modules/hippie/lib/hippie/assert.js:36:10)\n    at statusCode (node_modules/hippie/lib/hippie/expect.js:23:10)\n    at verify (node_modules/hippie/lib/hippie/client.js:494:5)\n    at Client.verify (node_modules/hippie/lib/hippie/client.js:495:5)\n    at /home/kraft/Work/qoollo/lifeguard/backend/integration-tests/node_modules/hippie/lib/hippie/client.js:455:12\n    at Client.exports.json [as parse] (node_modules/hippie/lib/hippie/parsers.js:21:3)\n    at Request._callback (node_modules/hippie/lib/hippie/client.js:453:10)\n    at Request.self.callback (node_modules/request/request.js:185:22)\n    at Request.<anonymous> (node_modules/request/request.js:1157:10)\n    at IncomingMessage.<anonymous> (node_modules/request/request.js:1079:12)\n    at endReadableNT (internal/streams/readable.js:1327:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)"}]
["fail",{"title":"returns 404 when the specified Initial Zone ID is not in the DB","fullTitle":"Creates an Incident and returns that Incident returns 404 when the specified Initial Zone ID is not in the DB","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/7_Incidents/CreateIncident.test.js","duration":4,"currentRetry":0,"err":"Status code\n\n    Actual:   200\n    Expected: 404\n","stack":"AssertionError: Status code\n\n    Actual:   200\n    Expected: 404\n\n    at assert (node_modules/hippie/lib/hippie/assert.js:36:10)\n    at statusCode (node_modules/hippie/lib/hippie/expect.js:23:10)\n    at verify (node_modules/hippie/lib/hippie/client.js:494:5)\n    at Client.verify (node_modules/hippie/lib/hippie/client.js:495:5)\n    at /home/kraft/Work/qoollo/lifeguard/backend/integration-tests/node_modules/hippie/lib/hippie/client.js:455:12\n    at Client.exports.json [as parse] (node_modules/hippie/lib/hippie/parsers.js:21:3)\n    at Request._callback (node_modules/hippie/lib/hippie/client.js:453:10)\n    at Request.self.callback (node_modules/request/request.js:185:22)\n    at Request.<anonymous> (node_modules/request/request.js:1157:10)\n    at IncomingMessage.<anonymous> (node_modules/request/request.js:1079:12)\n    at endReadableNT (internal/streams/readable.js:1327:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)"}]
["pass",{"title":"returns 200 when the request body params match the swagger specification","fullTitle":"Creates a Manager and returns that Manager returns 200 when the request body params match the swagger specification","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/8_Managers/CreateManager.test.js","duration":11,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 200 when the optional request body params match are null","fullTitle":"Creates a Manager and returns that Manager returns 200 when the optional request body params match are null","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/8_Managers/CreateManager.test.js","duration":11,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 400 when the request body params do not match the swagger specification","fullTitle":"Creates a Manager and returns that Manager returns 400 when the request body params do not match the swagger specification","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/8_Managers/CreateManager.test.js","duration":8,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 400 when the required request body params are null","fullTitle":"Creates a Manager and returns that Manager returns 400 when the required request body params are null","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/8_Managers/CreateManager.test.js","duration":3,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 400 when the specified email is already in use","fullTitle":"Creates a Manager and returns that Manager returns 400 when the specified email is already in use","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/8_Managers/CreateManager.test.js","duration":18,"currentRetry":0,"speed":"fast"}]
["fail",{"title":"returns 200 when the request body params match the DB entry","fullTitle":"should authorize an employee via the generated timed token from the QR code returns 200 when the request body params match the DB entry","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/Auth/AuthByTimedToken.test.js","duration":5,"currentRetry":0,"err":"Status code\n\n    Actual:   500\n    Expected: 200\n","stack":"AssertionError: Status code\n\n    Actual:   500\n    Expected: 200\n\n    at assert (node_modules/hippie/lib/hippie/assert.js:36:10)\n    at statusCode (node_modules/hippie/lib/hippie/expect.js:23:10)\n    at verify (node_modules/hippie/lib/hippie/client.js:494:5)\n    at Client.verify (node_modules/hippie/lib/hippie/client.js:495:5)\n    at /home/kraft/Work/qoollo/lifeguard/backend/integration-tests/node_modules/hippie/lib/hippie/client.js:455:12\n    at Client.exports.json [as parse] (node_modules/hippie/lib/hippie/parsers.js:21:3)\n    at Request._callback (node_modules/hippie/lib/hippie/client.js:453:10)\n    at Request.self.callback (node_modules/request/request.js:185:22)\n    at Request.<anonymous> (node_modules/request/request.js:1157:10)\n    at IncomingMessage.<anonymous> (node_modules/request/request.js:1079:12)\n    at endReadableNT (internal/streams/readable.js:1327:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)"}]
["pass",{"title":"returns 200 when the request body params match the DB entry","fullTitle":"should login an Employee returns 200 when the request body params match the DB entry","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/Auth/AuthEmployeeLogin.test.js","duration":13,"currentRetry":0,"speed":"fast"}]
["pass",{"title":"returns 200 when the request body params match the DB entry","fullTitle":"should get an QR code returns 200 when the request body params match the DB entry","file":"/home/kraft/Work/qoollo/lifeguard/backend/integration-tests/tests/Auth/GenerateAuthQR.test.js","duration":8,"currentRetry":0,"speed":"fast"}]
["end",{"suites":11,"tests":43,"passes":38,"pending":0,"failures":5,"start":"2021-04-13T17:31:46.417Z","end":"2021-04-13T17:31:46.779Z","duration":362}]
